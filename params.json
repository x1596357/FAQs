{
  "name": "Faqs",
  "tagline": "Information worth noted ",
  "body": "# FAQs\r\nJust some questions and answers I want to keep around. I don't want it to be as heavy as blog. You might find some answers here. If you find this page is too long to read, try using find(Ctrl+F).\r\n\r\n#### 1. Why linux man pages are not complete?\r\n\r\ntry update mandb, issue mandb command with root privilidge.\r\n\r\n#### 2. How to use automake and autoconf?\r\n1. create {src,docs,examples,...} folder in your working directory\r\n\r\n `# mkdir src`\r\n\r\n2. create your source code\r\n\r\n `# vi src/hello.c`\r\n\r\n3. run `autoscan` to create configure.ac\r\n ```\r\n # autoscan\r\n # mv configure.scan configure.ac\r\n ```\r\n4. fill in information of your program in `AC_INIT()`, add `AM_INIT_AUTMAKE` the next line, and add output files `Makefile` and `src/Makefile` and etc to `AC_OUTPUT()` at the end. Static and dynamic libraries need some other informations. Check other material.\r\n ```\r\n AC_INIT(hello,1.0,hello@hello.com)\r\n AM_INIT_AUTOMAKE\r\n ...\r\n AC_OUTPUT(Makefile src/Makefile)\r\n ```\r\n5. create `Makefile.am` in your working directory and in subdirectories like `src/` accordingly(applications or libraries).\r\n\r\n `# vi Makefile.am`\r\n\r\n with content\r\n ```\r\n AUTOMAKE_OPTIONS = foreign\r\n SUBDIRS = src\r\n ```\r\n `# vi src/Makefile.am`\r\n\r\n with content(application)\r\n ```\r\n bin_PROGRAMS = hello\r\n hello_SOURCES = hello.c\r\n ```\r\n with content(dynamic),check other materials for how to write for dynamic libraries and static libraries\r\n ```\r\n bin_PROGRAMS = hello\r\n hello_SOURCES = hello.c\r\n ```\r\n6. use `libtoolize` if you are creating libraries\r\n\r\n `# libtoolize -f -c`\r\n\r\n7. run `aclocal`,`autoheader`,`automake`,`autoconf` in order\r\n ```\r\n # aclocal\r\n # autoheader\r\n # automake -a\r\n # autoconf\r\n ```\r\nYou should have `./configure` scripts after this. If transfer these files to other system, you may want to run `autoreconf` and redo #7. Now you can do `./configure;make;make install;make clean;`\r\n\r\n#### 3. How to create and apply patch?\r\n\r\n 1. create\r\n \r\n  `# diff -Nur old/ new/ >%{name}-%{version}-%{fixwhat}.patch`\r\n\r\n  eg.\r\n\r\n  ` # diff -Nur hello/ new_hello/ > hello-1.0-fixprint.patch`\r\n  \r\n 2. apply \r\n \r\n  `# patch -p0 < %{patchname}.patch`\r\n\r\n  or this one. Recommand following one because base directory name may differ.\r\n  ```\r\n  # cd source_dir/\r\n  # patch -p1 < ../%{patchname}.patch\r\n  ```\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}